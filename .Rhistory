}
make_res_table
make_res_table()
matrix(c(0.1, 0.1, 0.05, 0.08)
)
matrix(c(0.1, 0.1, 0.05, 0.08), nrow = 2, ncol = 2, byrow = T)
make_res_table <- function(){
freq_mean_vec <- c(model_freq$parameters$mean[,1], model_freq$parameters$mean[,2])
baye_mean_vec <- samples_summary[1]$statistics[c(136:139),1]
lambda_vec <- c(model_freq$parameters$pro[1], 1-samples_summary[1]$statistics[135,1])
freq_sigma_vec <- model_freq$parameters$variance$sigma[c(1,2,4)]
baye_sigma_vec <- samples_summary[1]$statistics[c(1,2,4),1]
df_res <- cbind(freq_mean_vec, c(baye_mean_vec[1], baye_mean_vec[3], baye_mean_vec[2], baye_mean_vec[4]))
df_res <- rbind(df_res,lambda_vec, cbind(freq_sigma_vec, baye_sigma_vec))
colnames(df_res) <- c('Frequentist', 'Bayesian')
rownames(df_res) <- c("csf1 mean", "plasma1 mean", "csf2 mean", "plasma2 mean", 'lambda', 'Sigma csf', 'Sigma csf plasma', 'Sigma plasma')
df_res%>%round(.,digits = 7)
}
make_res_table()
######################################
### Title: 01_data_cleaning
### Date: 06/20/2024
### Author: Shuai Zhu
### Description: thesis
######################################
# Bayesian model.
### load library
library(tidyverse)
library(openxlsx)
library(mclust)
library(mixtools)
### setting working directory
#working_directory <-  'C:\\Users\\zhushu\\OneDrive\\Graduate File\\Course\\Thesis'
#setwd(working_directory)
### read data
df_liia <- read.xlsx('./DataRaw/LIIA Plasma and CSF Study.xlsx')%>%as_tibble()
df_transposed <- read.csv('./DataRaw/transposed_data_240619.csv')%>%as_tibble()
### clean
df_liia$visit <- factor(substr(df_liia$`Sample.ID`, 11, 11), labels = c("baseline", "followup") )
LIIA_baseline <- filter(df_liia, visit=="baseline")
data.fit <- LIIA_baseline%>%
dplyr::select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
source('Code/mnv.R')
source('Code/jags.R')
make_res_table()
samples
samples_summary[1]$statistics[c(1:4,135:139),]
samples_summary[1]
samples_summary[2]$quantiles[c(1:4,135:139),]%>%round(.,3)
library(tidyverse)
library(openxlsx)
library(mclust)
library(mixtools)
samples_summary[2]$quantiles[c(1:4,135:139),]%>%round(.,3)
samples_summary[1]$statistics[c(1:4,135:139),]
make_res_table()
source("C:/Users/zhushu/OneDrive/Graduate File/Course/Thesis/Code/simulation.R", echo=TRUE)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
generate_data <- function(sample_size, prob){
N1 <- sample_size*prob
N2 <- sample_size-N1
mu1 <- c(0.1, 0.1)
mu2 <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
sample1 <- mvrnorm(N1, mu = mu1, Sigma = vcov1 )
sample2 <- mvrnorm(N2, mu = mu2, Sigma = vcov1 )
sample.mvn <- rbind(sample1,sample2)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
plot(sample.mvn)
}
130*0.3
generate_data(130, 0.3)
generate_data <- function(sample_size, prob){
N1 <- sample_size*prob
N2 <- sample_size-N1
mu1 <- c(0.1, 0.1)
mu2 <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
sample1 <- mvrnorm(N1, mu = mu1, Sigma = vcov1 )
sample2 <- mvrnorm(N2, mu = mu2, Sigma = vcov1 )
sample.mvn <- rbind(sample1,sample2)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
#plot(sample.mvn)
}
generate_data(130, 0.3)
sample.mvn <- generate_data(130, 0.3)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
sample.mvn
generate_data <- function(sample_size, prob){
N1 <- sample_size*prob
N2 <- sample_size-N1
mu1 <- c(0.1, 0.1)
mu2 <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
sample1 <- mvrnorm(N1, mu = mu1, Sigma = vcov1 )
sample2 <- mvrnorm(N2, mu = mu2, Sigma = vcov1 )
sample.mvn <- rbind(sample1,sample2)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
#plot(sample.mvn)
return(sample.mvn)
}
sample.mvn <- generate_data(130, 0.3)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
generate_data <- function(sample_size, prob){
N.positive <- sample_size*prob
N.negative <- sample_size-N1
mu.positive <- c(0.1, 0.1)
mu.negative <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
sample.positive <- mvrnorm(N.positive, mu = mu.positive, Sigma = vcov1 )
sample.negative <- mvrnorm(mu.negative, mu = mu.negative, Sigma = vcov1 )
sample.mvn <- rbind(sample.positive,sample.negative)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
#plot(sample.mvn)
return(sample.mvn)
}
sample.mvn <- generate_data(130, 0.3)
generate_data <- function(sample_size, prob){
N.positive <- sample_size*prob
N.negative <- sample_size-N1
mu.positive <- c(0.1, 0.1)
mu.negative <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
sample.positive <- mvrnorm(N.positive, mu = mu.positive, Sigma = vcov1 )
sample.negative <- mvrnorm(mu.negative, mu = mu.negative, Sigma = vcov1 )
sample.mvn <- rbind(sample.positive,sample.negative)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
#plot(sample.mvn)
return(sample.mvn)
}
sample.mvn <- generate_data(130, 0.3)
generate_data <- function(sample_size, prob){
N.positive <- sample_size*prob
N.negative <- sample_size-N1
mu.positive <- c(0.1, 0.1)
mu.negative <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
sample.positive <- mvrnorm(N.positive, mu = mu.positive, Sigma = vcov1 )
sample.negative <- mvrnorm(mu.negative, mu = mu.negative, Sigma = vcov1 )
sample.mvn <- rbind(sample.positive,sample.negative)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
#plot(sample.mvn)
return(sample.mvn)
}
sample.mvn <- generate_data(130, 0.3)
generate_data <- function(sample_size, prob){
N.positive <- sample_size*prob
N.negative <- sample_size-N1
mu.positive <- c(0.1, 0.1)
mu.negative <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
sample.positive <- mvrnorm(N.positive, mu = mu.positive, Sigma = vcov1 )
sample.negative <- mvrnorm(N.negative, mu = mu.negative, Sigma = vcov1 )
sample.mvn <- rbind(sample.positive,sample.negative)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
#plot(sample.mvn)
return(sample.mvn)
}
sample.mvn <- generate_data(130, 0.3)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
sample.mvn <- generate_data(130, 0.3)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
generate_data <- function(sample_size, prob){
N1 <- sample_size*prob
N2 <- sample_size-N1
mu1 <- c(0.1, 0.1)
mu2 <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
sample1 <- mvrnorm(N1, mu = mu1, Sigma = vcov1 )
sample2 <- mvrnorm(N2, mu = mu2, Sigma = vcov1 )
sample.mvn <- rbind(sample1,sample2)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
#plot(sample.mvn)
return(sample.mvn)
}
sample.mvn <- generate_data(130, 0.3)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
make_res_table()
sample.mvn <- generate_data(130, 0.7)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
source('Code/mnv.R')
#source('Code/mnv.R')
source('Code/jags.R')
set.seed(123)
generate_data <- function(sample_size, prob){
N1 <- sample_size*prob
N2 <- sample_size-N1
mu1 <- c(0.1, 0.1)
mu2 <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
sample1 <- mvrnorm(N1, mu = mu1, Sigma = vcov1 )
sample2 <- mvrnorm(N2, mu = mu2, Sigma = vcov1 )
sample.mvn <- rbind(sample1,sample2)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
#plot(sample.mvn)
return(sample.mvn)
}
sample.mvn <- generate_data(130, 0.7)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
sample.mvn <- generate_data(130, 0.7)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
sample.mvn <- generate_data(130, 0.7)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
sample.mvn <- generate_data(130, 0.7)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
set.seed(123)
sample.mvn <- generate_data(130, 0.7)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
set.seed(123)
sample.mvn <- generate_data(130, 0.7)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
set.seed(1234)
sample.mvn <- generate_data(130, 0.7)
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
sample.mvn
bayesian_estimate(sample.mvn)
model_freq
# Prepare the data for JAGS
bayesian_estimate <- function(data){
data_jags <- list(
Y = data,  # Nx2 data matrix
N = nrow(data),  # Number of observations
mu_prior = matrix(c(0.1, 0.1, 0.05, 0.08), nrow = 2, ncol = 2, byrow = T),  # Means of the prior for mu (2x2)
cov_mu_prior_1 = diag(2)*10^6,  # Different covariance for the priors of mu
cov_mu_prior_2 = diag(2)*10^6,
R = diag(2)*10^-3,  # Scale matrix for the Wishart prior for Sigma_inv
nu = 3  # Degrees of freedom for the Wishart prior
)
set.seed(123)
# Initialize JAGS model
model <- jags.model(textConnection(model_string), data = data_jags, n.chains = 4)
# Burn-in period
update(model, 1000)
# Draw samples from posterior
samples <- coda.samples(model, variable.names = c("mu", "Sigma", "Z", "lambda"),
n.iter= 5000)
# Check summary of posterior distributions
samples_summary <- summary(samples)
return(samples_summary)
}
bayesian_estimate(data.fit)
library(rjags)
library(coda)
######################################
### Title: 01_data_cleaning
### Date: 06/20/2024
### Author: Shuai Zhu
### Description: thesis
######################################
# Bayesian model.
### load library
library(tidyverse)
install.packages("rjags")
#source('Code/mnv.R')
source('Code/01_data_cleaning.R')
#source('Code/mnv.R')
source('Code/01_data_cleaning.R')
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("textshaping")
#source('Code/mnv.R')
source('Code/01_data_cleaning.R')
#source('Code/mnv.R')
source('Code/01_data_cleaning.R')
#source('Code/mnv.R')
source('Code/01_data_cleaning.R')
source('Code/jags.R')
library(MASS)
library(parallel)
generate_data <- function(sample_size, prob){
N1 <- sample_size*prob
N2 <- sample_size-N1
mu1 <- c(0.1, 0.1)
mu2 <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
sample1 <- mvrnorm(N1, mu = mu1, Sigma = vcov1 )
sample2 <- mvrnorm(N2, mu = mu2, Sigma = vcov1 )
sample.mvn <- rbind(sample1,sample2)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
#plot(sample.mvn)
return(sample.mvn)
}
make_res_table <- function(model_freq,samples_summary){
freq_mean_vec <- c(model_freq$parameters$mean[,1], model_freq$parameters$mean[,2])
baye_mean_vec <- samples_summary[1]$statistics[c(136:139),1]
lambda_vec <- c(model_freq$parameters$pro[1], 1-samples_summary[1]$statistics[135,1])
freq_sigma_vec <- model_freq$parameters$variance$sigma[c(1,2,4)]
baye_sigma_vec <- samples_summary[1]$statistics[c(1,2,4),1]
df_res <- cbind(freq_mean_vec, c(baye_mean_vec[1], baye_mean_vec[3], baye_mean_vec[2], baye_mean_vec[4]))
df_res <- rbind(df_res,lambda_vec, cbind(freq_sigma_vec, baye_sigma_vec))
colnames(df_res) <- c('Frequentist', 'Bayesian')
rownames(df_res) <- c("csf1 mean", "plasma1 mean", "csf2 mean", "plasma2 mean", 'lambda', 'Sigma csf', 'Sigma csf plasma', 'Sigma plasma')
df_res%>%round(.,digits = 7)
}
## simulation setup
set.seed(1234)
n_sim <- 1000
cl <- makeCluster( detectCores())
cl
run_simulation <- function(i, sample_size){
model_list <- list()
data <- generate_data(sample_size, 0.7)
model_freq <- Mclust(data,G = 2,verbose = F)
model_bays <- bayesian_estimate(data)
make_res_table
}
clusterEvalQ(cl,{
library(MASS)
library(tidyverse)
library(mclust)
library(rjags)
NULL
})
clusterEvalQ(cl,{
library(MASS)
library(dplyr)
library(tidyr)
library(mclust)
library(rjags)
NULL
})
clusterExport(cl, "generate_data")
clusterExport(cl, "bayesian_estimate")
clusterExport(cl, "model_string")
system.time(model_list <- parLapply(cl,1:2, run_simulation,200))
clusterExport(cl, "make_res_table")
clusterExport(cl, "make_res_table")
system.time(model_list <- parLapply(cl,1:2, run_simulation,200))
system.time(model_list <- parLapply(cl,1:n_sim, run_simulation,200))
model_list%>%saveRDS('DataProcessed/samplesize250.RDS')
model_list
length(model_list)
model_list[1]
system.time(model_list <- parLapply(cl,1:2, run_simulation,200))
set.seed(1234)
n_sim <- 1000
cl <- makeCluster( detectCores())
run_simulation <- function(i, sample_size){
model_list <- list()
data <- generate_data(sample_size, 0.7)
model_freq <- Mclust(data,G = 2,verbose = F)
model_list[[1]] <- model_freq
model_bays <- bayesian_estimate(data)
model_list[[2]] <- model_bays$statistics
model_list[[3]] <- make_res_table(model_freq, model_bays)
model_list
}
clusterEvalQ(cl,{
library(MASS)
library(dplyr)
library(tidyr)
library(mclust)
library(rjags)
NULL
})
clusterExport(cl, "generate_data")
clusterExport(cl, "bayesian_estimate")
clusterExport(cl, "model_string")
clusterExport(cl, "make_res_table")
#system.time(lapply(1:10, run_simulation, 200))
system.time(model_list <- parLapply(cl,1:2, run_simulation,200))
model_list
system.time(model_list <- parLapply(cl,1:n_sim, run_simulation,200))
model_list%>%saveRDS('DataProcessed/samplesize250.RDS')
2195/60
model_list
model_list[1]
install.packages("tidyverse")
library(ggplot2)
install.packages('ggplot2')
install.packages('isoband')
install.packages("isoband", dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("units", dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("ggplot2", dependencies = TRUE, INSTALL_opts = '--no-lock')
library(ggplot2)
install.packages("tidyverse", dependencies = TRUE, INSTALL_opts = '--no-lock')
library(tidyverse)
model_list
model_list[[1]]
9.996694e-02
8.018490e-02
hist(model_list100[[1]]$data$csf)
model_list100 <- readRDS('DataProcessed/samplesize100.RDS')
model_list100[[1]]$freq$classification
hist(model_list100[[1]]$data$csf)
hist(model_list100[[1]]$data$plasma)
par(mfrow = c(1,2))
hist(model_list100[[1]]$data$csf)
hist(model_list100[[1]]$data$plasma)
model_list100[[1]]$data
model_list100[[1]]$data$plasma
plot(model_list100[[1]]$data)
par(mfrow = c(2,2))
hist(model_list100[[1]]$data$csf)
hist(model_list100[[1]]$data$plasma)
plot(model_list100[[1]]$data)
data_threshold <- model_list100[[1]]$data
data_threshold
data_threshold%>%mutate()
data_threshold <- model_list100[[1]]$data%>%as_tibble()
data_threshold%>%mutate(true_class = c(rep(1,70), rep(2,30)),
esti_class = case_when(plasma>0.1~2,
plasma<0.08~1,
.default = 0))
data_threshold%>%mutate(true_class = c(rep(1,70), rep(2,30)),
esti_class = case_when(plasma>0.1~2,
plasma<0.08~1,
.default = 0))%>%view
model_list100[[1]]$freq$classification
data_threshold%>%mutate(true_class = c(rep(1,70), rep(2,30)),
esti_class = case_when(plasma>0.09~2,
plasma<0.08~1,
.default = 0))%>%view
data_threshold%>%mutate(true_class = c(rep(1,70), rep(2,30)),
esti_class = case_when(plasma>0.09~1,
plasma<0.08~2,
.default = 0))%>%view
data_threshold <- data_threshold%>%mutate(true_class = c(rep(1,70), rep(2,30)),
esti_class = case_when(plasma>0.09~1,
plasma<0.08~2,
.default = 0))%>%view
data_threshold <- data_threshold%>%mutate(true_class = c(rep(1,70), rep(2,30)),
esti_class = case_when(plasma>0.09~1,
plasma<0.08~2,
.default = 0))
roc_obj <- roc(data_threshold$true_class, data_threshold$esti_class)
library(pROC)
roc_obj <- roc(data_threshold$true_class, data_threshold$esti_class)
roc_obj
plot(roc_obj)
data_threshold%>%view
table(data_threshold$true_class, data_threshold$esti_class)
data_threshold$plasma
data <- model_list100[[1]]$data%>%as_tibble()
pred_class <-  cut(predicted_prob,breaks = c(-Inf, threshold1, threshold2, Inf),
labels = c(1, 0, 2))
pred_class <-  cut(data$plasma,breaks = c(-Inf, threshold1, threshold2, Inf),
labels = c(1, 0, 2))
threshold1 <- 0.8
threshold2 <- 0.9
true_class <-  c(rep(1,70), rep(2,30))
pred_class <-  cut(data$plasma,breaks = c(-Inf, threshold1, threshold2, Inf),
labels = c(1, 0, 2))
true_class
pred_class
threshold2 <- 0.09
threshold1 <- 0.08
threshold2 <- 0.09
true_class <-  c(rep(1,70), rep(2,30))
pred_class <-  cut(data$plasma,breaks = c(-Inf, threshold1, threshold2, Inf),
labels = c(1, 0, 2))
true_class
pred_class
pred_class <-  cut(data$plasma,breaks = c(-Inf, threshold1, threshold2, Inf),
labels = c(2, 0, 1))
true_class
pred_class
roc(as.numeric(actual == 1), as.numeric(predicted_class == 1))
roc(as.numeric(true_class == 1), as.numeric(pred_class == 1))
roc_obj <- roc(as.numeric(true_class == 1), as.numeric(pred_class == 1))
plot(roc_obj)
sum(pred_class==0)
roc_obj <- roc(true_class, data$plasma)
plot(roc_obj)
roc_obj
model_list100[[1]]$bays
5.000000e-04
choose(9,3)
permutations(3,3)
