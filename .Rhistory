Y = sample.mvn,  # Nx2 data matrix
N = nrow(data.fit),  # Number of observations
mu_prior = matrix(c(0.01, 0.01, 0.05, 0.08), nrow = 2, ncol = 2, byrow = T),  # Means of the prior for mu (2x2)
cov_mu_prior_1 = diag(2)*10^6,  # Different covariance for the priors of mu
cov_mu_prior_2 = diag(2)*10^6,
R = diag(2)*10^-3,  # Scale matrix for the Wishart prior for Sigma_inv
nu = 3  # Degrees of freedom for the Wishart prior
)
# Initialize JAGS model
model <- jags.model(textConnection(model_string), data = data_jags, n.chains = 4)
# Burn-in period
update(model, 1000)
# Draw samples from posterior
samples <- coda.samples(model, variable.names = c("mu", "Sigma", "Z", "lambda"),
n.iter= 5000)
# Check summary of posterior distributions
samples_summary <- summary(samples)
samples_summary[2]$quantiles[c(1:4,135:139),]%>%round(.,3)
plot(sample.mvn)
samples_summary
samples_summary[1]
samples_summary[1]$quantiles[c(1:4,135:139),]%>%round(.,3)
samples_summary[1]
samples_summary[1]$statistics[c(1:4,135:139),]
set.seed(123)
sample.mvn%>%saveRDS('DataRaw/simulated sample.RDS')
working_directory <- "C:\\Users\\zhushu\\OneDrive\\Graduate File\\Course\\Thesis"
## frequentest
source(paste0(working_directory, '/Code/01_data_cleaning.R'))
LIIA_baseline <- filter(df_liia, visit=="baseline")
## specify data
data.fit <- LIIA_baseline%>%
select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
data.fit <- sample.mvn
library(MASS)
set.seed(123)
N1 <- 100
N2 <- 30
mu1 <- c(0.1, 0.1)
mu2 <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
vcov2 <- matrix(c(19e-05, 3e-05, 3e-05, 19e-05), nrow = 2, byrow = 2)
sample1 <- mvrnorm(N1, mu = mu1, Sigma = vcov1 )
sample2 <- mvrnorm(N2, mu = mu2, Sigma = vcov1 )
sample.mvn <- rbind(sample1,sample2)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
plot(sample.mvn)
sample.mvn%>%saveRDS('DataRaw/simulated sample.RDS')
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
working_directory <- "C:\\Users\\zhushu\\OneDrive\\Graduate File\\Course\\Thesis"
## frequentest
source(paste0(working_directory, '/Code/01_data_cleaning.R'))
LIIA_baseline
######################################
### Title: 01_data_cleaning
### Date: 06/20/2024
### Author: Shuai Zhu
### Description: thesis
######################################
# Bayesian model.
### load library
library(tidyverse)
library(openxlsx)
library(mclust)
library(mixtools)
### setting working directory
#working_directory <-  'C:\\Users\\zhushu\\OneDrive\\Graduate File\\Course\\Thesis'
#setwd(working_directory)
### read data
df_liia <- read.xlsx('./DataRaw/LIIA Plasma and CSF Study.xlsx')%>%as_tibble()
df_transposed <- read.csv('./DataRaw/transposed_data_240619.csv')%>%as_tibble()
### clean
df_liia$visit <- factor(substr(df_liia$`Sample.ID`, 11, 11), labels = c("baseline", "followup") )
LIIA_baseline <- filter(df_liia, visit=="baseline")
data.fit <- LIIA_baseline%>%
select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
data.fit
data.fit <- sample.mvn
model_freq <- Mclust(data.fit,G = 2)
classification <- model_freq$classification
#plot(model_freq, what = "density", type = "persp")
plot(model_freq, what = 'density')
plot(densityMclust(data.fit), what = "BIC")
plot(model_freq, what = "classification")
plot(model_freq, what = "uncertainty")
summary(model_freq)
model_freq$parameters$pro
model_freq$parameters$mean
model_freq$parameters$variance$sigma
## Bayesian
library(rjags)
library(coda)
source('Code/01_data_cleaning.R')
LIIA_baseline
model_string <- "
model {
# Likelihood
for (i in 1:N) {
Z[i] ~ dbern(lambda)  # Latent variable for component assignment
# Shared covariance matrix (Sigma_inv) for both components
Y[i,1:2] ~ dmnorm(mu[Z[i] + 1,], Sigma_inv[,])  # Precision matrix used here
}
# Priors
# Mixture proportion (lambda)
lambda ~ dbeta(1, 1)  # Flat prior for mixture proportion
# Priors for the means (each component has different covariance for the prior)
mu[1, 1:2] ~ dmnorm(mu_prior[1,], cov_mu_prior_1[,])
mu[2, 1:2] ~ dmnorm(mu_prior[2,], cov_mu_prior_2[,])
# Shared precision matrix (inverse of covariance matrix)
Sigma_inv[1:2,1:2] ~ dwish(R[,], nu)  # Wishart prior for the precision matrix
Sigma[1:2,1:2] <- inverse(Sigma_inv[,])  # Covariance matrix is the inverse of precision
}
"
# Prepare the data for JAGS
data_jags <- list(
Y = sample.mvn,  # Nx2 data matrix
N = nrow(data.fit),  # Number of observations
mu_prior = matrix(c(0.01, 0.01, 0.05, 0.08), nrow = 2, ncol = 2, byrow = T),  # Means of the prior for mu (2x2)
cov_mu_prior_1 = diag(2)*10^6,  # Different covariance for the priors of mu
cov_mu_prior_2 = diag(2)*10^6,
R = diag(2)*10^-3,  # Scale matrix for the Wishart prior for Sigma_inv
nu = 3  # Degrees of freedom for the Wishart prior
)
# Initialize JAGS model
model <- jags.model(textConnection(model_string), data = data_jags, n.chains = 4)
# Burn-in period
update(model, 1000)
# Draw samples from posterior
samples <- coda.samples(model, variable.names = c("mu", "Sigma", "Z", "lambda"),
n.iter= 5000)
# Check summary of posterior distributions
samples_summary <- summary(samples)
samples_summary[1]$statistics[c(1:4,135:139),]
samples_summary[2]$quantiles[c(1:4,135:139),]%>%round(.,3)
## plot
par(mfrow = c(2,2))
traceplot(samples[, "mu"])
## frequentest
source(paste0(working_directory, '/Code/01_data_cleaning.R'))
data.fit <- LIIA_baseline%>%
dyplr::select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
data.fit <- LIIA_baseline%>%
dpylr::select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
data.fit <- LIIA_baseline%>%
dplyr::select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
## specify data
data.fit <- LIIA_baseline%>%
select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
working_directory <- "C:\\Users\\zhushu\\OneDrive\\Graduate File\\Course\\Thesis"
## frequentest
source(paste0(working_directory, '/Code/01_data_cleaning.R'))
LIIA_baseline <- filter(df_liia, visit=="baseline")
## specify data
data.fit <- LIIA_baseline%>%
select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
working_directory <- "C:\\Users\\zhushu\\OneDrive\\Graduate File\\Course\\Thesis"
## frequentest
source(paste0(working_directory, '/Code/01_data_cleaning.R'))
LIIA_baseline <- filter(df_liia, visit=="baseline")
## specify data
data.fit <- LIIA_baseline%>%
select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
working_directory <- "C:\\Users\\zhushu\\OneDrive\\Graduate File\\Course\\Thesis"
## frequentest
source(paste0(working_directory, '/Code/01_data_cleaning.R'))
LIIA_baseline <- filter(df_liia, visit=="baseline")
## specify data
data.fit <- LIIA_baseline%>%
select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
## Bayesian
library(rjags)
library(coda)
source('Code/01_data_cleaning.R')
# JAGS model code for two-component bivariate normal mixture
model_string <- "
model {
# Likelihood
for (i in 1:N) {
Z[i] ~ dbern(lambda)  # Latent variable for component assignment
# Shared covariance matrix (Sigma_inv) for both components
Y[i,1:2] ~ dmnorm(mu[Z[i] + 1,], Sigma_inv[,])  # Precision matrix used here
}
# Priors
# Mixture proportion (lambda)
lambda ~ dbeta(1, 1)  # Flat prior for mixture proportion
# Priors for the means (each component has different covariance for the prior)
mu[1, 1:2] ~ dmnorm(mu_prior[1,], cov_mu_prior_1[,])
mu[2, 1:2] ~ dmnorm(mu_prior[2,], cov_mu_prior_2[,])
# Shared precision matrix (inverse of covariance matrix)
Sigma_inv[1:2,1:2] ~ dwish(R[,], nu)  # Wishart prior for the precision matrix
Sigma[1:2,1:2] <- inverse(Sigma_inv[,])  # Covariance matrix is the inverse of precision
}
"
# Prepare the data for JAGS
data_jags <- list(
Y = sample.mvn,  # Nx2 data matrix
N = nrow(data.fit),  # Number of observations
mu_prior = matrix(c(0.01, 0.01, 0.05, 0.08), nrow = 2, ncol = 2, byrow = T),  # Means of the prior for mu (2x2)
cov_mu_prior_1 = diag(2)*10^6,  # Different covariance for the priors of mu
cov_mu_prior_2 = diag(2)*10^6,
R = diag(2)*10^-3,  # Scale matrix for the Wishart prior for Sigma_inv
nu = 3  # Degrees of freedom for the Wishart prior
)
# Initialize JAGS model
model <- jags.model(textConnection(model_string), data = data_jags, n.chains = 4)
# Burn-in period
update(model, 1000)
# Draw samples from posterior
samples <- coda.samples(model, variable.names = c("mu", "Sigma", "Z", "lambda"),
n.iter= 5000)
# Check summary of posterior distributions
samples_summary <- summary(samples)
samples_summary[1]$statistics[c(1:4,135:139),]
samples_summary[2]$quantiles[c(1:4,135:139),]%>%round(.,3)
## plot
par(mfrow = c(2,2))
traceplot(samples[, "mu"])
## frequentest
source('/Code/01_data_cleaning.R'))
## frequentest
source('/Code/01_data_cleaning.R')
## frequentest
source('Code/01_data_cleaning.R')
source('Code/mnv.R')
## specify data
data.fit <- LIIA_baseline%>%
dplyr::select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
source('Code/mnv.R')
source('Code/mnv.R')
library(MASS)
set.seed(123)
N1 <- 100
N2 <- 30
mu1 <- c(0.1, 0.1)
mu2 <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
vcov2 <- matrix(c(19e-05, 3e-05, 3e-05, 19e-05), nrow = 2, byrow = 2)
sample1 <- mvrnorm(N1, mu = mu1, Sigma = vcov1 )
sample2 <- mvrnorm(N2, mu = mu2, Sigma = vcov1 )
sample.mvn <- rbind(sample1,sample2)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
plot(sample.mvn)
sample.mvn%>%saveRDS('DataRaw/simulated sample.RDS')
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
data.fit  <- sample.mvn
source('Code/mnv.R')
library(MASS)
set.seed(123)
N1 <- 100
N2 <- 30
mu1 <- c(0.1, 0.1)
mu2 <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
vcov2 <- matrix(c(19e-05, 3e-05, 3e-05, 19e-05), nrow = 2, byrow = 2)
sample1 <- mvrnorm(N1, mu = mu1, Sigma = vcov1 )
sample2 <- mvrnorm(N2, mu = mu2, Sigma = vcov1 )
sample.mvn <- rbind(sample1,sample2)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
plot(sample.mvn)
sample.mvn%>%saveRDS('DataRaw/simulated sample.RDS')
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
data.fit  <- sample.mvn
source('Code/mnv.R')
source('Code/jags.R')
model_freq
model_freq$parameters
model_freq$parameters$mean
c(model_freq$parameters$mean[,1], model_freq$parameters$mean[,2])
samples_summary[1]$statistics[c(1:4,135:139),]
baye_mean_vec <- samples_summary[1]$statistics[c(135:139),1]
baye_mean_vec
baye_mean_vec <- samples_summary[1]$statistics[c(136:139),1]
baye_mean_vec
cbind(freq_mean_vec, c(baye_mean_vec[1], baye_mean_vec[3], baye_mean_vec[2], baye_mean_vec[4]))
freq_mean_vec <- c(model_freq$parameters$mean[,1], model_freq$parameters$mean[,2])
baye_mean_vec <- samples_summary[1]$statistics[c(136:139),1]
cbind(freq_mean_vec, c(baye_mean_vec[1], baye_mean_vec[3], baye_mean_vec[2], baye_mean_vec[4]))
df_res <- cbind(freq_mean_vec, c(baye_mean_vec[1], baye_mean_vec[3], baye_mean_vec[2], baye_mean_vec[4]))
rownames(df_res)
dput(rownames(df_res))
colnames(df_res) <- c('Frequentist mean', 'Bayesian mean')
rownames(df_res) <- c("csf1", "plasma1", "csf1", "plasma1")
df_res
freq_mean_vec
samples_summary[1]$statistics[c(1:4,135:139),]
samples_summary[1]$statistics[135,1]
model_freq$parameters$variance$sigma
model_freq$parameters$variance$sigma[1
]
model_freq$parameters$variance$sigma[1,1]
model_freq$parameters$variance$sigma[1:4]
freq_sigma_vec <- model_freq$parameters$variance$sigma[c(1,2,4)]
freq_sigma_vec
samples_summary[1]$statistics[c(1:4,135:139),1]
samples_summary[1]$statistics[c(1,2,4),1]
cbind(freq_sigma_vec, baye_sigma_vec)
freq_sigma_vec <- model_freq$parameters$variance$sigma[c(1,2,4)]
baye_sigma_vec <- samples_summary[1]$statistics[c(1,2,4),1]
cbind(freq_sigma_vec, baye_sigma_vec)
rbind(df_res, cbind(freq_sigma_vec, baye_sigma_vec))
freq_sigma_vec
baye_sigma_vec
rbind(df_res, cbind(freq_sigma_vec,lambda_vec, baye_sigma_vec))
lambda_vec <- c(model_freq$parameters$pro, samples_summary[1]$statistics[135,1])
rbind(df_res, cbind(freq_sigma_vec,lambda_vec, baye_sigma_vec))
colnames(df_res) <- c('Frequentist', 'Bayesian')
freq_sigma_vec
rbind(df_res,lambda_vec, cbind(freq_sigma_vec, baye_sigma_vec))
df_res
lambda_vec
lambda_vec <- c(model_freq$parameters$pro, samples_summary[1]$statistics[135,1])
lambda_vec
lambda_vec <- c(model_freq$parameters$pro[1], samples_summary[1]$statistics[135,1])
lambda_vec
rbind(df_res,lambda_vec, cbind(freq_sigma_vec, baye_sigma_vec))
colnames(df_res) <- c('Frequentist', 'Bayesian')
rownames(df_res) <- c("csf1 mean", "plasma1 mean", "csf1 mean", "plasma1 mean", 'lambda', 'Sigma csf', 'Sigma csf plasma', 'Sigma plasma')
df_res <- cbind(freq_mean_vec, c(baye_mean_vec[1], baye_mean_vec[3], baye_mean_vec[2], baye_mean_vec[4]))
rbind(df_res,lambda_vec, cbind(freq_sigma_vec, baye_sigma_vec))
colnames(df_res) <- c('Frequentist', 'Bayesian')
rownames(df_res) <- c("csf1 mean", "plasma1 mean", "csf1 mean", "plasma1 mean", 'lambda', 'Sigma csf', 'Sigma csf plasma', 'Sigma plasma')
colnames(df_res) <- c('Frequentist', 'Bayesian')
df_res
df_res <- rbind(df_res,lambda_vec, cbind(freq_sigma_vec, baye_sigma_vec))
colnames(df_res) <- c('Frequentist', 'Bayesian')
rownames(df_res) <- c("csf1 mean", "plasma1 mean", "csf1 mean", "plasma1 mean", 'lambda', 'Sigma csf', 'Sigma csf plasma', 'Sigma plasma')
df_res
df_res%>%round(.,digits = 3)
df_res%>%round(.,digits = 5)
df_res%>%round(.,digits = 7)
source('Code/mnv.R')
source('Code/jags.R')
#plot(model_freq, what = "density", type = "persp")
par(mfrow = c(2,2))
plot(model_freq, what = 'density')
plot(densityMclust(data.fit), what = "BIC")
plot(model_freq, what = "classification")
plot(model_freq, what = "uncertainty")
plot(model_freq, what = 'density')
plot(densityMclust(data.fit), what = "BIC")
#plot(model_freq, what = "density", type = "persp")
par(mfrow = c(2,2))
plot(densityMclust(data.fit), what = "BIC")
plot(model_freq, what = "classification")
plot(model_freq, what = "uncertainty")
source('Code/mnv.R')
df_res%>%round(.,digits = 7)
df_liia <- read.xlsx('./DataRaw/LIIA Plasma and CSF Study.xlsx')%>%as_tibble()
df_transposed <- read.csv('./DataRaw/transposed_data_240619.csv')%>%as_tibble()
### clean
df_liia$visit <- factor(substr(df_liia$`Sample.ID`, 11, 11), labels = c("baseline", "followup") )
LIIA_baseline <- filter(df_liia, visit=="baseline")
data.fit <- LIIA_baseline%>%
dplyr::select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
source('Code/mnv.R')
source('Code/jags.R')
model_freq$parameters$mean
library(MASS)
set.seed(123)
N1 <- 100
N2 <- 30
mu1 <- c(0.1, 0.1)
mu2 <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
vcov2 <- matrix(c(19e-05, 3e-05, 3e-05, 19e-05), nrow = 2, byrow = 2)
sample1 <- mvrnorm(N1, mu = mu1, Sigma = vcov1 )
sample2 <- mvrnorm(N2, mu = mu2, Sigma = vcov1 )
sample.mvn <- rbind(sample1,sample2)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
plot(sample.mvn)
sample.mvn%>%saveRDS('DataRaw/simulated sample.RDS')
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
data.fit  <- sample.mvn
source('Code/mnv.R')
source('Code/jags.R')
freq_mean_vec <- c(model_freq$parameters$mean[,1], model_freq$parameters$mean[,2])
baye_mean_vec <- samples_summary[1]$statistics[c(136:139),1]
lambda_vec <- c(model_freq$parameters$pro[1], samples_summary[1]$statistics[135,1])
freq_sigma_vec <- model_freq$parameters$variance$sigma[c(1,2,4)]
baye_sigma_vec <- samples_summary[1]$statistics[c(1,2,4),1]
df_res <- cbind(freq_mean_vec, c(baye_mean_vec[1], baye_mean_vec[3], baye_mean_vec[2], baye_mean_vec[4]))
df_res <- rbind(df_res,lambda_vec, cbind(freq_sigma_vec, baye_sigma_vec))
colnames(df_res) <- c('Frequentist', 'Bayesian')
rownames(df_res) <- c("csf1 mean", "plasma1 mean", "csf2 mean", "plasma2 mean", 'lambda', 'Sigma csf', 'Sigma csf plasma', 'Sigma plasma')
df_res%>%round(.,digits = 7)
######################################
### Title: 01_data_cleaning
### Date: 06/20/2024
### Author: Shuai Zhu
### Description: thesis
######################################
# Bayesian model.
### load library
library(tidyverse)
library(openxlsx)
library(mclust)
library(mixtools)
### setting working directory
#working_directory <-  'C:\\Users\\zhushu\\OneDrive\\Graduate File\\Course\\Thesis'
#setwd(working_directory)
### read data
df_liia <- read.xlsx('./DataRaw/LIIA Plasma and CSF Study.xlsx')%>%as_tibble()
df_transposed <- read.csv('./DataRaw/transposed_data_240619.csv')%>%as_tibble()
### clean
df_liia$visit <- factor(substr(df_liia$`Sample.ID`, 11, 11), labels = c("baseline", "followup") )
LIIA_baseline <- filter(df_liia, visit=="baseline")
data.fit <- LIIA_baseline%>%
dplyr::select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
source('Code/mnv.R')
source('Code/jags.R')
make_res_table <- function(){
freq_mean_vec <- c(model_freq$parameters$mean[,1], model_freq$parameters$mean[,2])
baye_mean_vec <- samples_summary[1]$statistics[c(136:139),1]
lambda_vec <- c(model_freq$parameters$pro[1], samples_summary[1]$statistics[135,1])
freq_sigma_vec <- model_freq$parameters$variance$sigma[c(1,2,4)]
baye_sigma_vec <- samples_summary[1]$statistics[c(1,2,4),1]
df_res <- cbind(freq_mean_vec, c(baye_mean_vec[1], baye_mean_vec[3], baye_mean_vec[2], baye_mean_vec[4]))
df_res <- rbind(df_res,lambda_vec, cbind(freq_sigma_vec, baye_sigma_vec))
colnames(df_res) <- c('Frequentist', 'Bayesian')
rownames(df_res) <- c("csf1 mean", "plasma1 mean", "csf2 mean", "plasma2 mean", 'lambda', 'Sigma csf', 'Sigma csf plasma', 'Sigma plasma')
df_res%>%round(.,digits = 7)
}
make_res_table()
library(MASS)
set.seed(123)
N1 <- 100
N2 <- 30
mu1 <- c(0.1, 0.1)
mu2 <- c(0.05, 0.08)
vcov1 <- matrix(c(9e-05, 3e-05, 3e-05, 9e-05), nrow = 2, byrow = 2)
vcov2 <- matrix(c(19e-05, 3e-05, 3e-05, 19e-05), nrow = 2, byrow = 2)
sample1 <- mvrnorm(N1, mu = mu1, Sigma = vcov1 )
sample2 <- mvrnorm(N2, mu = mu2, Sigma = vcov1 )
sample.mvn <- rbind(sample1,sample2)%>%data.frame()
colnames(sample.mvn) <- c('csf', 'plasma')
plot(sample.mvn)
sample.mvn%>%saveRDS('DataRaw/simulated sample.RDS')
ggplot(sample.mvn, aes(x = csf)) +
geom_histogram(binwidth = 0.01, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Variable1", x = "Variable1", y = "Frequency") +
theme_minimal()
data.fit  <- sample.mvn
source('Code/mnv.R')
source('Code/jags.R')
make_res_table <- function(){
freq_mean_vec <- c(model_freq$parameters$mean[,1], model_freq$parameters$mean[,2])
baye_mean_vec <- samples_summary[1]$statistics[c(136:139),1]
lambda_vec <- c(model_freq$parameters$pro[1], samples_summary[1]$statistics[135,1])
freq_sigma_vec <- model_freq$parameters$variance$sigma[c(1,2,4)]
baye_sigma_vec <- samples_summary[1]$statistics[c(1,2,4),1]
df_res <- cbind(freq_mean_vec, c(baye_mean_vec[1], baye_mean_vec[3], baye_mean_vec[2], baye_mean_vec[4]))
df_res <- rbind(df_res,lambda_vec, cbind(freq_sigma_vec, baye_sigma_vec))
colnames(df_res) <- c('Frequentist', 'Bayesian')
rownames(df_res) <- c("csf1 mean", "plasma1 mean", "csf2 mean", "plasma2 mean", 'lambda', 'Sigma csf', 'Sigma csf plasma', 'Sigma plasma')
df_res%>%round(.,digits = 7)
}
make_res_table
make_res_table()
matrix(c(0.1, 0.1, 0.05, 0.08)
)
matrix(c(0.1, 0.1, 0.05, 0.08), nrow = 2, ncol = 2, byrow = T)
make_res_table <- function(){
freq_mean_vec <- c(model_freq$parameters$mean[,1], model_freq$parameters$mean[,2])
baye_mean_vec <- samples_summary[1]$statistics[c(136:139),1]
lambda_vec <- c(model_freq$parameters$pro[1], 1-samples_summary[1]$statistics[135,1])
freq_sigma_vec <- model_freq$parameters$variance$sigma[c(1,2,4)]
baye_sigma_vec <- samples_summary[1]$statistics[c(1,2,4),1]
df_res <- cbind(freq_mean_vec, c(baye_mean_vec[1], baye_mean_vec[3], baye_mean_vec[2], baye_mean_vec[4]))
df_res <- rbind(df_res,lambda_vec, cbind(freq_sigma_vec, baye_sigma_vec))
colnames(df_res) <- c('Frequentist', 'Bayesian')
rownames(df_res) <- c("csf1 mean", "plasma1 mean", "csf2 mean", "plasma2 mean", 'lambda', 'Sigma csf', 'Sigma csf plasma', 'Sigma plasma')
df_res%>%round(.,digits = 7)
}
make_res_table()
######################################
### Title: 01_data_cleaning
### Date: 06/20/2024
### Author: Shuai Zhu
### Description: thesis
######################################
# Bayesian model.
### load library
library(tidyverse)
library(openxlsx)
library(mclust)
library(mixtools)
### setting working directory
#working_directory <-  'C:\\Users\\zhushu\\OneDrive\\Graduate File\\Course\\Thesis'
#setwd(working_directory)
### read data
df_liia <- read.xlsx('./DataRaw/LIIA Plasma and CSF Study.xlsx')%>%as_tibble()
df_transposed <- read.csv('./DataRaw/transposed_data_240619.csv')%>%as_tibble()
### clean
df_liia$visit <- factor(substr(df_liia$`Sample.ID`, 11, 11), labels = c("baseline", "followup") )
LIIA_baseline <- filter(df_liia, visit=="baseline")
data.fit <- LIIA_baseline%>%
dplyr::select(c('CSF.AB42/40.Ratio', 'Plasma.AB42/40.Ratio'))%>%drop_na()
source('Code/mnv.R')
source('Code/jags.R')
make_res_table()
